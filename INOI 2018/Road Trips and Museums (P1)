// Solution on Codechef--> https://www.codechef.com/viewsolution/28714208
#include <bits/stdc++.h>
using namespace std;

int dfs(int node,vector<int>graph[],bool visited[],int mueseum[]){
	if (visited[node]){
		return 0;
	}
	  visited[node]=1;
	  int ans=mueseum[node];
	for(auto u:graph[node]){
		ans+=dfs(u,graph,visited,mueseum);
	}
	  return ans;
}

int main(){
	  int t;
	  cin >> t;
	while(t--){
		int n,m,k;
		cin >> n >> m >> k;
		vector<int>graph[n+1];
	 while(m--){
		int x, y;
		cin >> x >> y;
		graph[x].push_back(y);
		graph[y].push_back(x);
	 }
		int mueseum[n+1]={0};
	 for(int i=1;i<=n;i++){
		cin >> mueseum[i];
		}
		bool visited[n+1]={0};
		vector<int>final;
	 for(int i=1;i<=n;i++){
		if(!visited[i]){
			final.push_back(dfs(i,graph,visited,mueseum));
			}
		}
		  sort(final.begin(),final.end());
		if(final.size()<k){
			cout << -1 << "\n";
			continue;
		}
		  int minimum=0,maximum=final.size()-1,ans=0;
		for(int i=0;i<k;i++){
			if (i&1){
				ans+=final[minimum];
				minimum++;
			}
			else{
				ans+=final[maximum];
				maximum--;
			}
		}
		cout << ans << "\n";
	}
    return 0;
}
